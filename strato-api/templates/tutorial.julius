var helpers = ethlightjs.helpers;

    var password = 'mypassword';
    var keystore = undefined;
    var addresses = undefined;
    var apiURL = "http://stablenet.blockapps.net"
    var gasPrice = 100;
    var gasLimit = 3141591;

    function pushSolOrCallFunc(inputEl,data,button,storageArea) {
      if (button.value === "Push Solidity Code") {
        console.log("about to push solidity");
        var code = inputEl.value;
        var privateKey = document.getElementById("prvkey").value;
        console.log(privateKey);
        api.getContract(apiURL, code, privateKey, gasPrice, gasLimit,
                        function (contract) {
                          $(button).data('contractObject', contract);
                          button.value = "Call Function";    
                          button.innerHTML = "Call Function";
                          storageUpdate(button,storageArea);
                        });
      }
      else if (button.value === "Call Function") {
        var contract = $(button).data('contractObject');
        var address = contract.address;
           
        console.log("sending to contract address: " + address);
        console.log("data payload               : " + data);

        var n = document.getElementById("nonce").value;
        var value = 0;
        var privateKey = document.getElementById("prvkey").value;
        var url = apiURL + '/includetransaction';

        api.send(apiURL, data, privateKey, address, gasPrice, gasLimit, value,
                 function (x) {
                   storageUpdate(button,storageArea);
                 });
      }
    }
    
    function storageUpdate(button,stor) {
      var contract = $(button).data('contractObject');
      stor.value = "";
      contract.sync("",function() {
        for (var r in contract.vars) {
          var s = JSON.stringify(contract.vars[r]);
          console.log("storage value: " + s);
          stor.value += r + " : " + s + "\n";
        }
      });
    }
    
    function selectedValue(select) {
      return select[select.selectedIndex].innerHTML
    }

    function listArgs(tab) { 
      var ret = [];
      for (i = 0; i < tab.rows[0].cells.length; i++) {
        var val = tab.rows[0].cells[i].childNodes[1].value;
      
        ret.push(val);
      }
      console.log(ret);
      return ret;
    }      

    function dataPayload(outputEl,select,tab) {
      // console.log("abi for payload: " + $(outputEl).data('solabi'));
      // console.log("funcname       : " + selectedValue(select));

      return api.functionNameToData($(outputEl).data('solabi').abi, selectedValue(select), listArgs(tab));
    }

    function setSeed() {
      var seed = document.getElementById('seed').value;
      loadSeedInfo();
      // loadAccountInfo();
    }

    function randomSeed() {
      var randomSeed = ethlightjs.keystore.generateRandomSeed();
      document.getElementById('seed').value = randomSeed;
    }

   function loadSeedInfo(){

        var seed = document.getElementById("seed").value;
        console.log("creating keystore");
        console.log("seed: " + seed);
        console.log("password: " + password);
        keystore = new ethlightjs.keystore(seed, password);

        var x = document.getElementById("address");

        for (i = x.length-1; i >= 0; i--) {
          x.remove(i);
        }

        for(i = 0; i < 3; i++){
              var option = document.createElement("option");
              var addr = keystore.generateNewAddress(password);
              option.text =  addr;
              option.innerHTML = addr;
              x.appendChild(option);
        }
    }

    function isFunction(f) {
        return (f.type === "function");
    }

    function functionNameFilt(name,json) {
        return (json.type === "function" && json.name === name);
    }

    function getFunctionNameTypes(name,abi) {
        console.log("abi.abi: " + JSON.stringify(abi.abi));
        console.log("name: " + name);

        function partialApply(json) { 
          return functionNameFilt(name,json)
        }

        console.log("first filter: " + JSON.stringify(abi.abi.filter(partialApply)));
        console.log("next:         " + JSON.stringify(abi.abi.filter(partialApply).map(abiToInputs)));

        return abi.abi.filter(partialApply).map(abiToInputs)[0].map(getTypes);
    }

    function abiToName(json) {
          return json.name;
    }

    function abiToInputs(json) {
          return json.inputs;
    }

    function getTypes(json) {
          return json.type;
    }

    function funcNameToOption(func,el) {
       var toAdd = document.createElement("option");
       toAdd.text = func;
       toAdd.innerHTML = func;
       el.appendChild(toAdd);
    }
   
    function typeListToTable(types,tab) { 
      tab.deleteRow(0);
      var row = tab.insertRow(0);
      for (i = 0; i < types.length; i++) {
          var cell = row.insertCell(i);
          cell.innerHTML = types[i];
          var input = document.createElement("input");
          input.type = "text";
          cell.appendChild(input);
      }
    }

    function solabiToListInput(abi,el,tab) {
     
        var funcs = abi.abi.filter(isFunction).map(abiToName);


        function partialApply(func) {
          funcNameToOption(func,el);
        }

        funcs.map(partialApply);

        console.log("types: " + JSON.stringify(abi.abi.filter(isFunction).map(abiToInputs)[0].map(getTypes)));

        var types = abi.abi.filter(isFunction).map(abiToInputs)[0].map(getTypes);
        typeListToTable(types,tab);
    }

    function loadAccountInfo() {
        var seed = document.getElementById("seed").value;

        var address =  document.getElementById("address").value;
        // console.log("fetching prvkey");
        // console.log("address: " + address);
        // console.log("password: " + password);
        prvKey = keystore.exportPrivateKey(address, password);
        //console.log("setting prvkey: " + (typeof prvKey));

        document.getElementById("prvkey").value = prvKey;
   
      if (!prvkey.value.match(/^[a-f0-9]{64}$/i)) {
    invalidPrvKeyWarning.style.visibility="visible";
    return;
      } 

        var oReq = new XMLHttpRequest();
        oReq.open("GET", apiURL + "/query/account?address=" + address, true);
        oReq.onload = function () { 
        if(oReq.readyState == 4 && oReq.status == 200) {
    invalidPrvKeyWarning.style.visibility="hidden";
    var responseJSON = JSON.parse(this.responseText);
          if (responseJSON.length >= 1) {
      nonce.value = responseJSON[responseJSON.length - 1].nonce;
            balance.value = responseJSON[responseJSON.length - 1].balance;
      if (responseJSON.length > 1) alert("error! too many values in account query, just using the last value.");
    }
    else { 
            nonce.value = "0";
            balance.value = "0";
          }
        }
        else { //returned an error, but no biggie, could just be a malformed form item, etc.
          //output.value = "ERROR in fetching address info!\n" + this.responseText; 
        }
      }

      oReq.send();
    }

   function claimEther() {
        var address =  document.getElementById("address").value;

        var oReq = new XMLHttpRequest();
        oReq.open("POST", apiURL + "/faucet", true);

        var params = "address=" + encodeURIComponent(address);
        oReq.setRequestHeader("Content-type", "application/x-www-form-urlencoded");

        oReq.onload = function () { 
        if (oReq.readyState == 4 && oReq.status == 200) {
     // loadAccountInfo();
          }
        }

      oReq.send(params);
    }

   function compile(inputEl, outputEl, opt, tab, submitButton) {
      var oReq = new XMLHttpRequest();
      oReq.open("POST", apiURL + "/solc", true);

      var src = inputEl.value;

      var params = "src=" + encodeURIComponent(src);
      oReq.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
      submitButton.value = "Push Solidity Code";
      submitButton.innerHTML = "Push Solidity Code";

      oReq.onload = function () {
        if (oReq.readyState == 4 && oReq.status == 200) {
          compilerData = JSON.parse(this.responseText);
          if (compilerData.error != null) {
            outputEl.style.color = 'red';
            submitButton.disabled = true;
            outputEl.value = compilerData.error;
          }
          else {
            outputEl.style.color = 'black';
            submitButton.disabled = false;
            if (compilerData.contracts.length == 0)
              outputEl.value = "[Blank]";
            else
            {
              outputEl.value = "Compiled Binary:\n\n" + compilerData.contracts[0].bin;
              $(outputEl).data('bin', compilerData.contracts[0].bin);
              $(outputEl).data('solabi', compilerData.abis[0]);
              $(outputEl).data('xabi', compilerData.xabis);
              console.log($(outputEl).data('xabi'));
              $(opt).empty();
              solabiToListInput($(outputEl).data('solabi'),opt,tab);
            }
          }
        }
        else {
          outputEl.value = "ERROR!\n" + this.responseText;
        }
      }

      oReq.send(params);
    }

   function hash() {
    hashPass.value = ethUtil.sha3(pass.value).toString('hex');
   }